"V.fs_gc"   )
#Use lapply() to coerce and replace the chosen columns:
data[cols] <- lapply(data[cols], factor)
trans <- as (data, "transactions")
#-- Run rules for Apriori ----------------------------------------------------------------
Apriori_rules <- apriori(trans, parameter=list(support=0.01, confidence=0.1, maxlen=2, maxtime=10))
Apriori_rules <- unique(Apriori_rules) #remove duplicate rulesAp
#define a consequent
#  Apriori_rules_Depict <- subset(Apriori_rules, subset = rhs %pin% "Depicting_pres")
#  inspect(Apriori_rules_Depict)
#add IMs
#reduce rules set size (for processing), by filtering out low lift rules.
Apriori_rules <- subset(Apriori_rules, subset = lift > 1.2)
quality(Apriori_rules)$lift <- interestMeasure(Apriori_rules, measure="lift", trans = trans)
quality(Apriori_rules)$conviction <- interestMeasure(Apriori_rules, measure="conviction", trans = trans)
quality(Apriori_rules)$cosine <- interestMeasure(Apriori_rules, measure="cosine", trans = trans)
quality(Apriori_rules)$jaccard <- interestMeasure(Apriori_rules, measure="jaccard", trans = trans)
quality(Apriori_rules)$Fisher <- interestMeasure(Apriori_rules, measure="fishersExactTest", trans = trans)
quality(Apriori_rules)$hlift<- interestMeasure(Apriori_rules, measure="hyperLift", trans = trans)
quality(Apriori_rules)$hconf <- interestMeasure(Apriori_rules, measure="hyperConfidence", trans = trans)
quality(Apriori_rules)$chiSquared <- interestMeasure(Apriori_rules, measure="chiSquared", trans = trans)
#round((Apriori_rules)$Fisher, digits=3)
#------Output ----------------------------------------------------------------------
#Force R not to use exponential notation (e.g. e+10)
Apriori_D13_train = format(Apriori_rules,scientific=FALSE)
#refactor to dataframe
Apriori_D13_train <- as(Apriori_rules,"data.frame")
#split LHS from RHS
Apriori_D13_train <- Apriori_D13_train %>%
separate(rules, c("Antecedent", "Consequent"), "=>")
head(Apriori_D13_train)
#filter output by pvalue
Apriori_D13_train <- filter(Apriori_D13_train, Fisher<0.5)
#round column values to remove exponent numbers
Apriori_D13_train$Fisher <- round(Apriori_D13_train$Fisher, digits = 3)
Apriori_D13_train$hlift <- round(Apriori_D13_train$hlift, digits = 3)
Apriori_D13_train$hconf <- round(Apriori_D13_train$hconf, digits = 3)
Apriori_rules.sub <- subset(Apriori_rules, subset = lhs %pin% "=1" & rhs %pin% "=1" & lhs %pin% "V" & rhs %pin% "NMF")
subrules <- Apriori_rules.sub
head(Apriori_rules.sub)
##  ----------------
plot(subrules, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
##  -------------------
-----------------
##-----------PLOT dataframe------------
plot(data$Apriori_D13_train,type="l",main="Normal Distribution",xlab="x",ylab="y")
##  ----------------
plot(subrules, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(subrules, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
TData <- read.csv("./data/D13_TrainingSet.csv", fileEncoding="UTF-8-BOM")
#data <- subset(data, select= -c(Cheeks)) #remove cheeks
head(TData)
summary(TData)
## 2 Create Transactions
names(TData)
T_cols <- c("NMF_Body_Twist"      ,"NMF_Body_LEAN"          ,"NMF_Body_Shoulder"     ,"NMF_Body_back"        ,
"NMF_Body_forward"     , "NMF_Body_latral"       ,"CA"                ,"NMF_Cheeks"           ,
"NMF_EyeAp_SQ"         , "NMF_EyeAp_blink"       ,"NMF_EyeAp_WD"          ,"NMF_EyeAp_CLOSED"     ,
"NMF_Eyebrows_Raised"  , "NMF_Eyebrows_Furrowed" ,"NMF_Eyegaze_camera"    ,"NMF_Eyegaze_dn"       ,
"NMF_Eyegaze_up"       , "NMF_Eyegaze_sr"        ,"NMF_Eyegaze_sl"        ,"NMF_Eyegaze_Inter"    ,
"NMF_Eyegaze_dh"       , "NMF_Eyegaze_nd"        ,"NMF_Eyegaze_hands"     ,"NMF_Head_TILT"        ,
"NMF_Head_TURN"        , "NMF_Head_PUSH"         ,"NMF_Head_Nod"          ,"NMF_Head_Shake"       ,
"NMF_Head_back"        , "NMF_Head_forward"      ,"NMF_Head_latral"       ,"VP_gc"                   ,
"VD_gc"                   , "VI_gc"                    ,"Viloc_gc"                 ,"VIDir_gc"                ,
"V.fs_gc"   )
#Use lapply() to coerce and replace the chosen columns:
TData[T_cols] <- lapply(TData[T_cols], factor)
T_trans <- as (TData, "transactions")
T_rules <- apriori(T_trans, parameter=list(support=0.01, confidence=0.1, maxlen=2, maxtime=10))
T_rules <- unique(T_rules) #remove duplicate rulesAp
#define a consequent
#  T_rules_Depict <- subset(T_rules, subset = rhs %pin% "Depicting_pres")
#  inspect(T_rules_Depict)
#add IMs
#reduce rules set size (for processing), by filtering out low lift rules.
T_rules <- subset(T_rules, subset = lift > 1.2)
quality(T_rules)$lift <- interestMeasure(T_rules, measure="lift", T_trans = T_trans)
quality(T_rules)$conviction <- interestMeasure(T_rules, measure="conviction", T_trans = T_trans)
quality(T_rules)$cosine <- interestMeasure(T_rules, measure="cosine", T_trans = T_trans)
quality(T_rules)$jaccard <- interestMeasure(T_rules, measure="jaccard", T_trans = T_trans)
quality(T_rules)$Fisher <- interestMeasure(T_rules, measure="fishersExactTest", T_trans = T_trans)
quality(T_rules)$hlift<- interestMeasure(T_rules, measure="hyperLift", T_trans = T_trans)
quality(T_rules)$hconf <- interestMeasure(T_rules, measure="hyperConfidence", T_trans = T_trans)
quality(T_rules)$chiSquared <- interestMeasure(T_rules, measure="chiSquared", T_trans = T_trans)
#round((T_rules)$Fisher, digits=3)
#------Output ----------------------------------------------------------------------
#Force R not to use exponential notation (e.g. e+10)
Apriori_D13_train = format(T_rules,scientific=FALSE)
#refactor to dataframe
Apriori_D13_train <- as(T_rules,"data.frame")
#split LHS from RHS
Apriori_D13_train <- Apriori_D13_train %>%
separate(rules, c("Antecedent", "Consequent"), "=>")
head(Apriori_D13_train)
#filter output by pvalue
Apriori_D13_train <- filter(Apriori_D13_train, Fisher<0.5)
#round column values to remove exponent numbers
Apriori_D13_train$Fisher <- round(Apriori_D13_train$Fisher, digits = 3)
Apriori_D13_train$hlift <- round(Apriori_D13_train$hlift, digits = 3)
Apriori_D13_train$hconf <- round(Apriori_D13_train$hconf, digits = 3)
View(T_rules)
quality(T_rules)$conviction <- interestMeasure(T_rules, measure="conviction", T_trans = T_trans)
quality(T_rules)$conviction <- interestMeasure(T_rules, measure="conviction", trans = T_trans)
quality(T_rules)$lift <- interestMeasure(T_rules, measure="lift", trans = T_trans)
quality(T_rules)$conviction <- interestMeasure(T_rules, measure="conviction", trans = T_trans)
quality(T_rules)$cosine <- interestMeasure(T_rules, measure="cosine", trans = T_trans)
quality(T_rules)$jaccard <- interestMeasure(T_rules, measure="jaccard", trans = T_trans)
quality(T_rules)$Fisher <- interestMeasure(T_rules, measure="fishersExactTest", trans = T_trans)
quality(T_rules)$hlift<- interestMeasure(T_rules, measure="hyperLift", trans = T_trans)
quality(T_rules)$hconf <- interestMeasure(T_rules, measure="hyperConfidence", trans = T_trans)
quality(T_rules)$chiSquared <- interestMeasure(T_rules, measure="chiSquared", trans = T_trans)
Apriori_D13_train = format(T_rules,scientific=FALSE)
#refactor to dataframe
Apriori_D13_train <- as(T_rules,"data.frame")
#split LHS from RHS
Apriori_D13_train <- Apriori_D13_train %>%
separate(rules, c("Antecedent", "Consequent"), "=>")
head(Apriori_D13_train)
#filter output by pvalue
Apriori_D13_train <- filter(Apriori_D13_train, Fisher<0.5)
#round column values to remove exponent numbers
Apriori_D13_train$Fisher <- round(Apriori_D13_train$Fisher, digits = 3)
Apriori_D13_train$hlift <- round(Apriori_D13_train$hlift, digits = 3)
Apriori_D13_train$hconf <- round(Apriori_D13_train$hconf, digits = 3)
Vdata <- read.csv("./data/D13_ValidationSet.csv", fileEncoding="UTF-8-BOM")
#data <- subset(data, select= -c(Cheeks)) #remove cheeks
head(Vdata)
summary(Vdata)
## 2 Create Transactions
names(Vdata)
V_cols <- c("NMF_Body_Twist"      ,"NMF_Body_LEAN"          ,"NMF_Body_Shoulder"     ,"NMF_Body_back"        ,
"NMF_Body_forward"     , "NMF_Body_latral"       ,"CA"                ,"NMF_Cheeks"           ,
"NMF_EyeAp_SQ"         , "NMF_EyeAp_blink"       ,"NMF_EyeAp_WD"          ,"NMF_EyeAp_CLOSED"     ,
"NMF_Eyebrows_Raised"  , "NMF_Eyebrows_Furrowed" ,"NMF_Eyegaze_camera"    ,"NMF_Eyegaze_dn"       ,
"NMF_Eyegaze_up"       , "NMF_Eyegaze_sr"        ,"NMF_Eyegaze_sl"        ,"NMF_Eyegaze_Inter"    ,
"NMF_Eyegaze_dh"       , "NMF_Eyegaze_nd"        ,"NMF_Eyegaze_hands"     ,"NMF_Head_TILT"        ,
"NMF_Head_TURN"        , "NMF_Head_PUSH"         ,"NMF_Head_Nod"          ,"NMF_Head_Shake"       ,
"NMF_Head_back"        , "NMF_Head_forward"      ,"NMF_Head_latral"       ,"VP_gc"                   ,
"VD_gc"                   , "VI_gc"                    ,"Viloc_gc"                 ,"VIDir_gc"                ,
"V.fs_gc"   )
#Use lapply() to coerce and replace the chosen columns:
Vdata[V_cols] <- lapply(Vdata[V_cols], factor)
V_trans <- as (Vdata, "transactions")
#-- Run rules for Apriori ----------------------------------------------------------------
V_rules <- apriori(V_trans, parameter=list(support=0.01, confidence=0.1, maxlen=2, maxtime=10))
V_rules <- unique(V_rules) #remove duplicate rulesAp
#define a consequent
#  V_rules_Depict <- subset(V_rules, subset = rhs %pin% "Depicting_pres")
#  inspect(V_rules_Depict)
#add IMs
#reduce rules set size (for processing), by filtering out low lift rules.
V_rules <- subset(V_rules, subset = lift > 1.2)
quality(V_rules)$lift <- interestMeasure(V_rules, measure="lift", trans = V_trans)
quality(V_rules)$conviction <- interestMeasure(V_rules, measure="conviction", trans = V_trans)
quality(V_rules)$cosine <- interestMeasure(V_rules, measure="cosine", trans = V_trans)
quality(V_rules)$jaccard <- interestMeasure(V_rules, measure="jaccard", trans = V_trans)
quality(V_rules)$Fisher <- interestMeasure(V_rules, measure="fishersExactTest", trans = V_trans)
quality(V_rules)$hlift<- interestMeasure(V_rules, measure="hyperLift", trans = V_trans)
quality(V_rules)$hconf <- interestMeasure(V_rules, measure="hyperConfidence", trans = V_trans)
quality(V_rules)$chiSquared <- interestMeasure(V_rules, measure="chiSquared", trans = V_trans)
#round((V_rules)$Fisher, digits=3)
#------Output ----------------------------------------------------------------------
#Force R not to use exponential notation (e.g. e+10)
#Apriori_D13_val = format(V_rules,scientific=FALSE)
#refactor to dataframe
Apriori_D13_val <- as(V_rules,"data.frame")
#split LHS from RHS
Apriori_D13_val <- Apriori_D13_val %>%
separate(rules, c("Antecedent", "Consequent"), "=>")
head(Apriori_D13_val)
#filter output by pvalue
Apriori_D13_val <- filter(Apriori_D13_val, Fisher<0.5)
#round column values to remove exponent numbers
Apriori_D13_val$Fisher <- round(Apriori_D13_val$Fisher, digits = 3)
Apriori_D13_val$hlift <- round(Apriori_D13_val$hlift, digits = 3)
Apriori_D13_val$hconf <- round(Apriori_D13_val$hconf, digits = 3)
T_rules.sub <- subset(T_rules, subset = lhs %pin% "=1" & rhs %pin% "=1" & lhs %pin% "V" & rhs %pin% "NMF")
plot(T_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
V_rules.sub <- subset(T_rules, subset = lhs %pin% "=1" & rhs %pin% "=1" & lhs %pin% "V" & rhs %pin% "NMF")
plot(V_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(T_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(T_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(V_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(T_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 20)
plot(V_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(T_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 20)
plot(V_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 20)
plot(V_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 20,   interactive = TRUE)
plot(subrules, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
##Select subsets of dataframe data (training and Validation)
Apriori_D13_val2 <- as(V_rules,"data.frame") #without splitting LHS and RHS
##Plot scatter plots (training and Validation overlap)
plot(x=Apriori_D13_val2$rules, y=Apriori_D13_val2$support)
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_val2$rules, Apriori_D13_val2$support)
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_val2$lift, Apriori_D13_val2$support)
View(Apriori_D13_val2)
lift
lift
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_val2$lift, Apriori_D13_val2$support)
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_val2$lift, Apriori_D13_val2$support, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_val2$lift, Apriori_D13_val2$support, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_val2$confidence, Apriori_D13_val2$support, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
V_rules.sub <- subset(V_rules, subset = lhs %pin% "=1" & rhs %pin% "=1" & lhs %pin% "V" & rhs %pin% "NMF")
Apriori_D13_val2 <- as(V_rules,"data.frame") #without splitting LHS and RHS
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_train2$confidence, Apriori_D13_train2$support, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_train2$confidence, Apriori_D13_train2$support, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
##Select subsets of dataframe data (training and Validation)
Apriori_D13_train2 <- as(T_rules,"data.frame") #without splitting LHS and RHS
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_train2$confidence, Apriori_D13_train2$support, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
##Plot scatter plots (training and Validation overlap)
plot(Apriori_D13_train2$confidence, Apriori_D13_train2$support, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(Apriori_D13_val2$confidence, Apriori_D13_val2$support, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
T_rules.sub <- subset(T_rules, subset = lhs %pin% "=1" & rhs %pin% "=1" & lhs %pin% "V" & rhs %pin% "NMF")
V_rules.sub <- subset(V_rules, subset = lhs %pin% "=1" & rhs %pin% "=1" & lhs %pin% "V" & rhs %pin% "NMF")
##Plot arulesVis network graphs (training and Validation)
plot(T_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 20)
##Plot arulesVis network graphs (training and Validation)
plot(T_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(V_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10,   interactive = TRUE)
plot(V_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 10)
plot(V_rules.sub, method = "graph", asEdges = TRUE, measure = "support", shading = "confidence", limit = 20)
plot(Apriori_D13_train2$confidence, Apriori_D13_train2$support,type="l",main="Normal Distribution",xlab="x",ylab="y")
plot(Apriori_D13_train2$confidence, Apriori_D13_train2$support,type="l",main="Normal Distribution",xlab="x",ylab="y")
lines(Apriori_D13_train2$lift,lty=2,lwd=2,col="green")
ggplot(data, aes(x=reorder(Apriori_D13_train2, Apriori_D13_train2, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support')
ggplot(data, aes(x=reorder(Apriori_D13_train2, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support')
ggplot(Apriori_D13_train2, aes(x=reorder(support, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support')
ggplot(Apriori_D13_train2, aes(x=reorder(support, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
ggplot(Apriori_D13_train2, aes(x=reorder(support, support>.05, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
ggplot(Apriori_D13_train2, aes(x=reorder(support, support>.08, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
ggplot(Apriori_D13_train2, aes(x=reorder(support, support>.8, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
plot(Apriori_D13_val2$rules)
plot(Apriori_D13_val2$support)
barplot(Apriori_D13_val2$support)
barplot(subset(Apriori_D13_val2$support, support>.5)
plot(subset(Apriori_D13_val2$support, support>.5)
plot(subset(Apriori_D13_val2$support, support>.5))
plot(subset(Apriori_D13_val2$support, support>.5))
plot(subset(Apriori_D13_val2$support, support>.9))
subtest <- subset(Apriori_D13_val2, support>.5)
plot(subtest$support)
boxplot(subtest$support)
boxplot(subtest$support, subtest&confidence)
barplot(subtest$support, subtest&confidence)
barplot(subtest$support, subtest&confidence)
barplot(subtest$support)
barplot(subtest$rules)
barplot(subtest$rules)
plot(subtest$rules)
plot(subtest)
plot(subtestconfidence)
plot(subtest$confidence)
ggplot(Apriori_D13_train2, aes(x=reorder(support, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
ggplot(subtest, aes(x=reorder(support, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
ggplot(subtest$rules, aes(x=reorder(support, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
ggplot(subtest, aes(x=reorder(rules, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
subtest <- subset(lhs %pin% "=1" & rhs %pin% "=1" & lhs %pin% "V" & rhs %pin% "NMF")
subtest <- subset(Apriori_D13_val2, support>.5 & rules %pin% "=1")
subtest <- subset(Apriori_D13_val2, support>.5 & rules %pin% "1")
subtest <- subset(Apriori_D13_val2, support>.5 & rules %in% "1")
View(subtest)
subtest <- Apriori_D13_val2[grep("1", Apriori_D13_val2$rules), ]
View(subtest)
subtest <- Apriori_D13_val2[grep("0-", Apriori_D13_val2$rules), ]
subtest <- Apriori_D13_val2[!grep("0", Apriori_D13_val2$rules), ]
subtest <- dplyr::filter(Apriori_D13_val2, !grepl('0|_word', rules))
subtest <- subset(Apriori_D13_val2, support>.5)
View(subtest)
subtest <- dplyr::filter(Apriori_D13_val2, !grepl('0', rules))
subtest <- subset(Apriori_D13_val2, support>.5)
View(subtest)
subtest <- dplyr::filter(Apriori_D13_val2, !grepl('0', rules))
View(subtest)
subtest <- subset(subtest, support>.5)
View(subtest)
subtest <- dplyr::filter(Apriori_D13_val2, !grepl('0', rules))
subtest <- subset(subtest, confidence>.5)
View(subtest)
subtest.t <- dplyr::filter(Apriori_D13_train2, !grepl('0', rules))
subtest.t <- subset(subtest.t, confidence>.5)
ggplot(subtest.t, aes(x=reorder(rules, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
subtest.t <- subset(subtest.t, support>.5)
subtest.t <- dplyr::filter(Apriori_D13_train2, !grepl('0', rules))
subtest.t <- subset(subtest.t, confidence>.5)
subtest.t <- subset(subtest.t, support>.3)
ggplot(subtest.t, aes(x=reorder(rules, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
subtest.t <- dplyr::filter(Apriori_D13_train2, !grepl('0', rules))
subtest.t <- subset(subtest.t, lift>.3)
subtest.t <- subset(subtest.t, lift>.3)
View(subtest.t)
subtest.t <- subset(subtest.t, lift>2)
subtest.t <- subset(subtest.t, confidence>.5)
ggplot(subtest.t, aes(x=reorder(rules, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support', limit = 10)
ggplot(subtest.t, aes(x=reorder(rules, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support')
ggplot(subtest.t, aes(x=reorder(rules, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support') +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=reorder(support, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support') +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=reorder(support, rules, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support') +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=reorder(rules, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Support') +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=reorder(rules, support, function(x)-length(x)))) +
geom_bar(fill='red') +  labs(x='Rules') +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, support) +
labs(x='Rules') + #Label names
ggplot(subtest.t, aes(x=rules, y=support) +
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=support, y=rules)) +
geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=support, y=lift)) +
geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_bar(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_bar(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_line(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_line() +
#geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
r
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_bar(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_box(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support, color = genus)) +
geom_bar(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_bar(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_bar(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules', y='Support') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_bar(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules', y='Support') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
ggplot(subtest.t, aes(x=rules, y=support)) +
geom_point(stat="identity") +
#geom_bar(fill='red') +
labs(x='Rules', y='Support') + #Label names
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
subtest.val <- dplyr::filter(Apriori_D13_val2, !grepl('0', rules))
subtest.val <- subset(subtest.val, confidence>.5)
subtest.val <- subset(subtest.t, lift>2)
ggplot(subtest.t ,aes(x=rules, y=support)) +geom_point() +geom_point(data=subtest.val,colour='red') + xlim(0, 10)
View(subtest.val)
ggplot(subtest.t ,aes(x=rules, y=support)) +geom_bar() +geom_bar(data=subtest.val,colour='red') + xlim(0, 10)
ggplot(subtest.t ,aes(x=rules, y=support)) +geom_bar() +geom_bar(data=subtest.val,colour='red') + xlim(0, 10)
ggplot(subtest.t ,aes(x=confidence, y=support)) +geom_bar() +geom_bar(data=subtest.val,colour='red') + xlim(0, 10)
TData <- read.csv("./data/D17_TrainingSet.csv", fileEncoding="UTF-8-BOM")
names(TData)
T_cols <- c("Partly_Lex",            "Fully_Lex",             "Non_Lex",  "NMF_Body_Twist"      ,"NMF_Body_LEAN"          ,"NMF_Body_Shoulder"     ,"NMF_Body_back"        ,
"NMF_Body_forward"     , "NMF_Body_latral"       ,"CA"                ,"NMF_Cheeks"           ,
"NMF_EyeAp_SQ"         , "NMF_EyeAp_blink"       ,"NMF_EyeAp_WD"          ,"NMF_EyeAp_CLOSED"     ,
"NMF_Eyebrows_Raised"  , "NMF_Eyebrows_Furrowed" ,"NMF_Eyegaze_camera"    ,"NMF_Eyegaze_dn"       ,
"NMF_Eyegaze_up"       , "NMF_Eyegaze_sr"        ,"NMF_Eyegaze_sl"        ,"NMF_Eyegaze_Inter"    ,
"NMF_Eyegaze_dh"       , "NMF_Eyegaze_nd"        ,"NMF_Eyegaze_hands"     ,"NMF_Head_TILT"        ,
"NMF_Head_TURN"        , "NMF_Head_PUSH"         ,"NMF_Head_Nod"          ,"NMF_Head_Shake"       ,
"NMF_Head_back"        , "NMF_Head_forward"      ,"NMF_Head_latral"     )
#Use lapply() to coerce and replace the chosen columns:
TData[T_cols] <- lapply(TData[T_cols], factor)
T_trans <- as (TData, "transactions")
#-- Run rules for Apriori ----------------------------------------------------------------
T_rules <- apriori(T_trans, parameter=list(support=0.01, confidence=0.1, maxlen=2, maxtime=10))
T_rules <- unique(T_rules) #remove duplicate rulesAp
#define a consequent
#  T_rules_Depict <- subset(T_rules, subset = rhs %pin% "Depicting_pres")
#  inspect(T_rules_Depict)
#add IMs
#reduce rules set size (for processing), by filtering out low lift rules.
T_rules <- subset(T_rules, subset = lift > 1.2)
quality(T_rules)$lift <- interestMeasure(T_rules, measure="lift", trans = T_trans)
quality(T_rules)$conviction <- interestMeasure(T_rules, measure="conviction", trans = T_trans)
quality(T_rules)$cosine <- interestMeasure(T_rules, measure="cosine", trans = T_trans)
quality(T_rules)$jaccard <- interestMeasure(T_rules, measure="jaccard", trans = T_trans)
quality(T_rules)$Fisher <- interestMeasure(T_rules, measure="fishersExactTest", trans = T_trans)
quality(T_rules)$hlift<- interestMeasure(T_rules, measure="hyperLift", trans = T_trans)
quality(T_rules)$hconf <- interestMeasure(T_rules, measure="hyperConfidence", trans = T_trans)
quality(T_rules)$chiSquared <- interestMeasure(T_rules, measure="chiSquared", trans = T_trans)
#round((T_rules)$Fisher, digits=3)
#------Output ----------------------------------------------------------------------
#Force R not to use exponential notation (e.g. e+10)
Apriori_D17_train = format(T_rules,scientific=FALSE)
#refactor to dataframe
Apriori_D17_train <- as(T_rules,"data.frame")
#split LHS from RHS
Apriori_D17_train <- Apriori_D17_train %>%
separate(rules, c("Antecedent", "Consequent"), "=>")
head(Apriori_D17_train)
#filter output by pvalue
Apriori_D17_train <- filter(Apriori_D17_train, Fisher<0.5)
#round column values to remove exponent numbers
Apriori_D17_train$Fisher <- round(Apriori_D17_train$Fisher, digits = 3)
Apriori_D17_train$hlift <- round(Apriori_D17_train$hlift, digits = 3)
Apriori_D17_train$hconf <- round(Apriori_D17_train$hconf, digits = 3)
#All rules
write.csv(Apriori_D17_train,"./Output/D17_rules_trainingSet.csv", row.names = FALSE);
Vdata <- read.csv("./data/D17_ValidationSet.csv", fileEncoding="UTF-8-BOM")
names(Vdata)
V_cols <- c("Partly_Lex",            "Fully_Lex",             "Non_Lex",  "NMF_Body_Twist"      ,"NMF_Body_LEAN"          ,"NMF_Body_Shoulder"     ,"NMF_Body_back"        ,
"NMF_Body_forward"     , "NMF_Body_latral"       ,"CA"                ,"NMF_Cheeks"           ,
"NMF_EyeAp_SQ"         , "NMF_EyeAp_blink"       ,"NMF_EyeAp_WD"          ,"NMF_EyeAp_CLOSED"     ,
"NMF_Eyebrows_Raised"  , "NMF_Eyebrows_Furrowed" ,"NMF_Eyegaze_camera"    ,"NMF_Eyegaze_dn"       ,
"NMF_Eyegaze_up"       , "NMF_Eyegaze_sr"        ,"NMF_Eyegaze_sl"        ,"NMF_Eyegaze_Inter"    ,
"NMF_Eyegaze_dh"       , "NMF_Eyegaze_nd"        ,"NMF_Eyegaze_hands"     ,"NMF_Head_TILT"        ,
"NMF_Head_TURN"        , "NMF_Head_PUSH"         ,"NMF_Head_Nod"          ,"NMF_Head_Shake"       ,
"NMF_Head_back"        , "NMF_Head_forward"      ,"NMF_Head_latral"     )
#Use lapply() to coerce and replace the chosen columns:
Vdata[V_cols] <- lapply(Vdata[V_cols], factor)
V_trans <- as (Vdata, "transactions")
#-- Run rules for Apriori ----------------------------------------------------------------
V_rules <- apriori(V_trans, parameter=list(support=0.01, confidence=0.1, maxlen=2, maxtime=10))
V_rules <- unique(V_rules) #remove duplicate rulesAp
#define a consequent
#  V_rules_Depict <- subset(V_rules, subset = rhs %pin% "Depicting_pres")
#  inspect(V_rules_Depict)
#add IMs
#reduce rules set size (for processing), by filtering out low lift rules.
V_rules <- subset(V_rules, subset = lift > 1.2)
quality(V_rules)$lift <- interestMeasure(V_rules, measure="lift", trans = V_trans)
quality(V_rules)$conviction <- interestMeasure(V_rules, measure="conviction", trans = V_trans)
quality(V_rules)$cosine <- interestMeasure(V_rules, measure="cosine", trans = V_trans)
quality(V_rules)$jaccard <- interestMeasure(V_rules, measure="jaccard", trans = V_trans)
quality(V_rules)$Fisher <- interestMeasure(V_rules, measure="fishersExactTest", trans = V_trans)
quality(V_rules)$hlift<- interestMeasure(V_rules, measure="hyperLift", trans = V_trans)
quality(V_rules)$hconf <- interestMeasure(V_rules, measure="hyperConfidence", trans = V_trans)
quality(V_rules)$chiSquared <- interestMeasure(V_rules, measure="chiSquared", trans = V_trans)
#round((V_rules)$Fisher, digits=3)
#------Output ----------------------------------------------------------------------
#Force R not to use exponential notation (e.g. e+10)
#Apriori_D17_val = format(V_rules,scientific=FALSE)
#refactor to dataframe
Apriori_D17_val <- as(V_rules,"data.frame")
#split LHS from RHS
Apriori_D17_val <- Apriori_D17_val %>%
separate(rules, c("Antecedent", "Consequent"), "=>")
head(Apriori_D17_val)
#filter output by pvalue
Apriori_D17_val <- filter(Apriori_D17_val, Fisher<0.5)
#round column values to remove exponent numbers
Apriori_D17_val$Fisher <- round(Apriori_D17_val$Fisher, digits = 3)
Apriori_D17_val$hlift <- round(Apriori_D17_val$hlift, digits = 3)
Apriori_D17_val$hconf <- round(Apriori_D17_val$hconf, digits = 3)
#Write rules to csv file
write.csv(Apriori_D17_val,"./Output/D17_rules_validationSet.csv", row.names = FALSE);
